<p>What happens if we combine two or more tables without any restrictions? For example,<code>regions</code> with <code>countries</code> of the scheme <code>HR</code>. This can be done by placing both tables in the FROM clause and separated by commas.</p><blockquote><p><code>SELECT *<br/>FROM regions, countries;</code></p></blockquote><p>The <strong>Cartesian product</strong> between two tables results in all the combinations of all the rows of those two tables.</p><table align="center" border="1" summary="Results from query"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th><th style="background-color:#9e9e9e; text-align:center">REGION_NAME</th><th style="background-color:#9e9e9e; text-align:center">COUNTRY_ID</th><th style="background-color:#9e9e9e; text-align:center">COUNTRY_NAME</th><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th></tr><tr><td>1</td><td>Europe</td><td>AR</td><td>Argentina</td><td>2</td></tr><tr><td>1</td><td>Europe</td><td>AU</td><td>Australia</td><td>3</td></tr><tr><td>1</td><td>Europe</td><td>BE</td><td>Belgium</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>BR</td><td>Brazil</td><td>2</td></tr><tr><td>1</td><td>Europe</td><td>CA</td><td>Canada</td><td>2</td></tr><tr><td>1</td><td>Europe</td><td>CH</td><td>Switzerland</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>CN</td><td>China</td><td>3</td></tr><tr><td>1</td><td>Europe</td><td>DECADE</td><td>Germany</td><td>1</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr></tbody></table><p>This operation is not the most used since it takes a row from a table (<code>regions</code>) and associates it with each and every row of the other table (<code>countries</code>), regardless of whether they are related or not. That's why it appears to us '<strong>Europe</strong>'associated with '<strong>Argentina</strong>'or with '<strong>Australia</strong>'.</p><p>The most normal thing is that we want to select the records according to some criteria.</p><p>We'll need to <strong>discriminate</strong> in some way to only appear the rows of a table that are related to rows the other table. This is called <strong>associate tables</strong> (<code>JOIN</code>).</p><p>To make an internal composition part of a Cartesian product and those rows that do not meet the composition condition are removed.</p><p>The important thing in the internal compositions is to match the fields that refer to the same properties,<em> even if they have different names</em>.</p><p>In our case, to get the internal composition between <code>regions </code>and <code>countries </code>we will have to discriminate through the attribute <code>REGION_ID</code> of both tables.</p><blockquote><p><code>SELECT *<br/>FROM regions, countries<br/><strong>WHERE regions.REGION_ID = countries.REGION_ID</strong>;</code></p></blockquote><table align="center" border="1" summary="Results from query"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th><th style="background-color:#9e9e9e; text-align:center">REGION_NAME</th><th style="background-color:#9e9e9e; text-align:center">COUNTRY_ID</th><th style="background-color:#9e9e9e; text-align:center">COUNTRY_NAME</th><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th></tr><tr><td>1</td><td>Europe</td><td>NL</td><td>Netherlands</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>FR</td><td>France</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>UK</td><td>United Kingdom</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>DK</td><td>Denmark</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>BE</td><td>Belgium</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>CH</td><td>Switzerland</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>IT</td><td>Italy</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>DECADE</td><td>Germany</td><td>1</td></tr><tr><td>2</td><td>Americas</td><td>US</td><td>United States of America</td><td>2</td></tr></tbody></table><p>We can observe now that <code>'Europe'</code> is already only associated with European countries because the value of <code>REGION_ID</code> both tables match.</p><p>The rules for compositions are:</p><ul><li>You can combine as many tables as you want.</li><li>The combination criterion may consist of more than one pair of columns.</li><li>In the clause <code>SELECT</code> columns can be quoted from both tables, condition or not, the combination.</li><li>If there are columns with the same name in the different tables, they should be identified by specifying the source table or using a board alias.</li></ul><p>The columns in the clause <code>WHERE</code> called <strong>pairing columns</strong> since they are the ones that allow pairing the rows of the two tables. These do not have to be included in the selection list. We will pair tables that are related to each other and also one of the pairing columns will be the main key in your table. When we pair fields we must specify as follows: <code>NombreTabla1. Camporelacionado1 = NombreTabla2.Camporelacionado2</code>.</p><h3>Exercise:</h3><p>It shows employee data along with the department data they work in.</p><p>Order the result alphabetically by the surnames of the employees.</p><p><small><em>Don't worry if, in the solution shown, some attributes appear displaced. At the moment, use a <code>*</code> in the <code>SELECT</code>.</em></small></p>