<p>What happens if we join two or more tables without any restrictions? For example, <code>regions</code> with <code>countries</code> from the <code>HR</code> schema. We can do this by putting both tables in the FROM clause and separated by commas.</p><blockquote><p><code>SELECT *<br />FROM regions, countries;</code></p></ blockquote><p>The <strong>Cartesian product</strong> between two tables returns all combinations of all rows from those two tables.</p><table align="center" border="1" summary ="Results from query"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th><th style="background-color:#9e9e9e; text -align:center">REGION_NAME</th><th style="background-color:#9e9e9e; text-align:center">COUNTRY_ID</th><th style="background-color:#9e9e9e; text-align :center">COUNTRY_NAME</th><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th></tr><tr><td>1</td><td >Europe</td><td>AR</td><td>Argentina</td><td>2</td></tr><tr><td>1</td><td>Europe< /td><td>AU</td><td>Australia</td><td>3</td></tr><tr><td>1</td><td>Europe</td> <td>BE</td><td>Belgium</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td >BR</td><td>Brazil</td><td>2</td></tr><tr><td>1</td><td>Europe</td><td>CA< /td><td>Canada</td><td>2</td></tr><tr><td>1</td><td>Europe</td><td>CH</td> <td>Switzerland</td><td>1</td></tr><tr><td>1</td><td>Europe</td><td>CN</td><td> China</td><td>3</td></tr><tr><td>1</td><td>Europe</td><td>DE</td><td>Germany</ td><td>1</td></tr><tr><td>...</td><td>...</td><td>...</td><td> ...</td><td>...</td></tr></tbody></table><p>This operation is not one of the most used since it takes a row from a table (< code>regions</code>) and associates it with each and every one of the rows of the other table (<code>countries</code>), regardless of whether they are related or not. For this reason, '<strong>Europe</strong>' appears associated with '<strong>Argentina</strong>' or with '<strong>Australia</strong>'.</p><p>The most normal it is that we want to select the records according to some criteria.</p><p>We will need to <strong>discriminate</strong> in some way so that only the rows of a table that are related to rows of the other table appear. This is called <strong>associating tables</strong> (<code>JOIN</code>).</p><p>To make an internal composition, we start from a Cartesian product and eliminate those rows that are not they meet the composition condition.</p><p>The important thing in inner compositions is to match the fields that refer to the same properties,<em>even if they have different names</em>.</p><p> In our case, to achieve the internal composition between <code>regions </code> and <code>countries </code>, we will have to discriminate through the <code>REGION_ID</code> attribute of both tables.</p> <blockquote><p><code>SELECT *<br />FROM regions, countries<br /><strong>WHERE regions.REGION_ID = countries.REGION_ID</strong>;</code></p></blockquote ><table align="center" border="1" summary="Results from query"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th ><th style="background-color:#9e9e9e; text-align:center">REGION_NAME</th><th style="background-color:#9e9e9e; text-align:ce enter">COUNTRY_ID</th><th style="background-color:#9e9e9e; text-align:center">COUNTRY_NAME</th><th style="background-color:#9e9e9e; text-align:center">REGION_ID</th></tr><tr><td>1</td><td>Europe</td><td>NL</td><td>Netherlands</td ><td>1</td></tr><tr><td>1</td><td>Europe</td><td>FR</td><td>France</td><td >1</td></tr><tr><td>1</td><td>Europe</td><td>UK</td><td>United Kingdom</td><td>1 </td></tr><tr><td>1</td><td>Europe</td><td>DK</td><td>Denmark</td><td>1</td ></tr><tr><td>1</td><td>Europe</td><td>BE</td><td>Belgium</td><td>1</td></ tr><tr><td>1</td><td>Europe</td><td>CH</td><td>Switzerland</td><td>1</td></tr>< tr><td>1</td><td>Europe</td><td>IT</td><td>Italy</td><td>1</td></tr><tr>< td>1</td><td>Europe</td><td>DE</td><td>Germany</td><td>1</td></tr><tr><td>2 </td><td>Americas</td><td>US</td><td>United States of America</td><td>2</td></tr></tbody></table ><p>We can now see that <code>'Europe'</code> is now only associated with countries in Europe because the value of <code>REGION_ID</code> in both tables matches.</p><p> The rules for compositions are:</p><ul><li>You can combine as many tables as you want.</li><li>The c The combination criterion can be made up of more than one pair of columns.</li><li>In the <code>SELECT</code> clause, columns from both tables can be cited, whether or not they condition the combination.</li> <li>If there are columns with the same name in the different tables, they must be identified by specifying the source table or by using a table alias.</li></ul><p>The columns that appear in the <code> clause WHERE</code> are called <strong>matching columns</strong> since they are the ones that allow the rows of the two tables to be matched. These do not have to be included in the selection list. We will match tables that are related to each other and also one of the matching columns will be primary key in your table. When we match fields we must specify as follows: <code> TableName1. RelatedField1 = TableName2.RelatedField2</code>.</p><h3>Exercise:</h3><p>Shows the data of the employees along with the data of the department in which they work.</p><p> Sort the output alphabetically by employee last names.</p><p><small><em>Don't worry if some attributes are displaced in the solution shown. For now, use a <code>*</code> in the <code>SELECT</code>.</em></small> and use the <code>FETCH FIRST 5 ROWS ONLY</code> clause at the end of the statement so that the number of rows in the result is manageable</p>