<h3><code>CROSS JOIN</code></h3><p>It will create a cartesian product of the rows of both tables so we can avoid the use of the clause <code>WHERE</code>.</p><p>It can be used, for example, to compare values that are in different rows.</p><h3>Example:</h3><p>What employees charge more than double any of the employees in department 80?</p><blockquote><p><code>SELECT<br/>    WELL_PAID.LAST_NAME AS "LAST_NAME WELL_PAID",<br/>    WELL_PAID.SALARY AS "SALARY WELL_PAID",<br/>    BAD_PAID.LAST_NAME AS "LAST_NAME BAD_PAID",<br/>    BAD_PAID.SALARY AS "SALARY BAD_PAID"<br/>FROM employees WELL_PAID CROSS JOIN employees BAD_PAID<br/>WHERE WELL_PAID.SALARY >= BAD_PAID.SALARY * 2 AND BAD_PAID.DEPARTMENT_ID = 80<br/>ORDER BY BAD_PAID.LAST_NAME</code></p></blockquote><table align="center" border="1" summary="Results from query 3"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">SALARY WELL_PAID</th><th style="background-color:#9e9e9e; text-align:center">SALARY WELL_PAID</th><th style="background-color:#9e9e9e; text-align:center">LAST_NAME BAD_PAID</th><th style="background-color:#9e9e9e; text-align:center">SALARY BAD_PAID</th></tr><tr><td>King</td><td>24000</td><td>Abel</td><td>11000</td></tr><tr><td>Russell</td><td>14000</td><td>And</td><td>6400</td></tr><tr><td>De Haan</td><td>17000</td><td>And</td><td>6400</td></tr><tr><td>Kochhar</td><td>17000</td><td>And</td><td>6400</td></tr><tr><td>King</td><td>...</td><td>...</td><td>...</td></tr></tbody></table><p>We must note that, as we have used the same table twice, we must create an alias for every use we make of it to be able to refer to the attributes whose values we want to use.</p><h3>Exercise</h3><p>What employee, who has as boss (<code>MANAGER_ID</code>) the employee 100, has a commission of double or more than any of the colleagues who have that same boss?</p>