<p><code>NATURAL JOIN</code> you need to use it very carefully, as sometimes you can return unexpected results. For example, if we would like to relate, in a consultation with <code>NATURAL JOIN</code>, the boards of employees and departments, the server would find two attributes with the same name in each of the tables (<code>DEPARTMENT_ID</code> and <code>MANAGER_ID</code>) <em>What would you choose to relate both tables?</em></p><h3><code>JOIN USING</code></h3><p>This clause allows to establish relationships indicating which common fields or fields are to be used for it.</p><h3>Example</h3><p>The following consultation shows the department's employees named 'IT', indicating that the attribute should be used <code>DEPARTMENT_ID</code> to relate the records of both tables. I mean, the employees who, at the attribute <code>DEPARTMENT_ID</code> have the same value as the registration of departments it has by name <em>'IT'</em>?</p><blockquote><p><code>SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_NAME<br/>FROM employees <strong>JOIN</strong> departments <strong>USING(DEPARTMENT_ID)</strong><br/>WHERE DEPARTMENT_NAME = 'IT'<br/>ORDER BY LAST_NAME;</code></p><pre> first_name 日本語 last_name<br/> David Δ Austin Русский IT<br/> Bruce ⋆ Ernst Русский IT<br/> Alexander Δ Hunold 日本語 IT<br/> Diana Δ Lorentz Δ IT<br/> Valli Δ Pataballa Δ IT<br/>(5 rows)</pre></blockquote><h3>Exercise</h3><p>It shows the name, last names and time in which work changes have been recorded (<code>job_history</code>) in department 50. It uses for it the attribute <code>EMPLOYEE_ID</code>which is present in both tables.</p><p>Order the result alphabetically by surnames.</p>