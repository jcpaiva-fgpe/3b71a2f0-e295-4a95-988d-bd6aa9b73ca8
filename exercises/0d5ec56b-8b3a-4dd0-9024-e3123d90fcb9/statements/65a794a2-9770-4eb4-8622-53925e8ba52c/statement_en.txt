<p>Below is a table with some of the most common character string features along with the result obtained with its use.</p><table align="center" border="1" cellspacing="0" style="border-collapse:collapse; width:NaN"><tbody><tr><td style="background-color:#9e9e9e; border-color:#9e9e9e; border-style:solid; border-width:1px; text-align:center; vertical-align:top"><p><strong>Function</strong></p></td></tr></tbody></table><td style="background-color:#9e9e9e; border-color:#9e9e9e; border-style:solid; border-width:1px; text-align:center; vertical-align:top"><p><strong>Description</strong></p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>CHR (n) </strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns the character equivalent to n.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>CONCAT (cad1, cad2)</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns cad1 concatenated with cad2. equivalent to UD.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>LOWER (cad)</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns the chain to lowercases.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>UPPER (cad)</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns the chain converted to capital letters.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>INITCAP (cad)</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns cad1 with the first letter of each word in capital letters.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>LPAD (cad1, n [, cad2])</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Fills cad1 on the left with cad2 or white until reaching n.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>RPAD (cad1, n [,cad2])</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Fills cad1 on the right with cad2 or white until reaching n.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>LTRIM (cad, [,set])</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Delete a set of characters (set) or white to the left.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>RTRIM (cad [,set])</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Delete a set of characters (set) or white to the right.</p></td><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>REPLACE (cad, cad_búsqueda [,cadena-sustitución] )</strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns cad with each cad-bush replaced by chain-</p></td><p>replacement.</p><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>S</strong><strong>UBSTR (cad, m [, n]) </strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns a caddy string of length n from character</p></td><p>position m. If m is negative, start at the end.</p><tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p><code><strong>TRANSLATE (cad1, cad2, cad3) </strong></code></p></td></tr><td style="border-bottom:1px solid #9e9e9e; border-left:1px solid #9e9e9e; border-right:1px solid #9e9e9e; border-top:1px solid #9e9e9e; vertical-align:top"><p>Returns cad1 with the cad2 characters replaced by cad3.</p></td><p>The full list of functions can be obtained from the documentation <a href="https://www.postgresql.org/docs/14/functions-string.html">Functions and operators with Strings in PostgreSQL</a>.</p><h3>Example:</h3><p>We will begin the examples with the function <code>CONCAT(cad1, cad2)</code>which returns a string of characters composed of the concatenation of the two strings that are sent as arguments, in the same order in which they are sent.</p><p>Assuming the company's domio <code>HR</code> That's it. <em>hr.com</em>, we will generate your full email address to programmers:</p><blockquote><p><code>SELECT CONCAT(EMAIL, '@hr.com') AS "EMAIL"<br/>FROM employees<br/>WHERE JOB_ID = 'IT_PROG';</code></p></blockquote><table align="center" border="1" summary="Results from query 3"><tbody><tr><th style="background-color:#9e9e9e; text-align:center"><p>EMAIL</p></th></tr></tbody></table><tr><td><p>AHUNOLD@hr.com</p></td></tr><tr><td><p>BERNST@hr.com</p></td></tr><tr><td><p>DAUSTIN@hr.com</p></td></tr><tr><td><p>VPATABAL@hr.com</p></td></tr><tr><td><p>DLORENTZ@hr.com</p></td></tr><p>Normally, email addresses appear in lowercases, so to the previous sentence we will add the function <code>LOWER(cadena)</code>:</p><blockquote><p><code>SELECT CONCAT(<strong>LOWER(</strong>EMAIL<strong>)</strong>, '@hr.com') AS "EMAIL"<br/>FROM employees<br/>WHERE JOB_ID = 'IT_PROG';</code></p></blockquote><table align="center" border="1" summary="Results from query 3"><tbody><tr><th style="background-color:#9e9e9e; text-align:center"><p>EMAIL</p></th></tr></tbody></table><tr><td><p>ahunold@hr.com</p></td></tr><tr><td><p>bernst@hr.com</p></td></tr><tr><td><p>daustin@hr.com</p></td></tr><tr><td><p>vpatabal@hr.com</p></td></tr><tr><td><p>dlorentz@hr.com</p></td></tr><p>The e-mail of the employees is already stored in an attribute of the table, but it is generated with the first letter of the name concatenated with the last name, as follows:</p><blockquote><p><code>SELECT FIRST_NAME, LAST_NAME,</code><br/><code><strong>CONCAT(LOWER(CONCAT(SUBSTR(FIRST_NAME, 1, 1), LAST_NAME)), '@hr.com') AS "EMAIL"</strong><br/>FROM employees<br/>WHERE JOB_ID = 'IT_PROG';</code></p></blockquote><table align="center" border="1" summary="Results from query 3"><tbody><tr><th style="background-color:#9e9e9e; text-align:center"><p>EMAIL</p></th></tr></tbody></table><tr><td><p>ahunold@hr.com</p></td></tr><tr><td><p>bernst@hr.com</p></td></tr><tr><td><p>daustin@hr.com</p></td></tr><tr><td><p><strong>vpataballa</strong>@hr.com</p></td></tr><tr><td><p>dlorentz@hr.com</p></td></tr><p>In fact, if the last name is very long, only the first 7 characters are taken, the following sentence remains:</p><blockquote><p><code>SELECT FIRST_NAME, LAST_NAME,<br/>    CONCAT(<br/>        LOWER(<br/>            CONCAT(<br/>                SUBSTR(FIRST_NAME, 1, 1),<br/>                <strong>SUBSTR(LAST_NAME, 1, 7)</strong><br/>            )<br/>        ),<br/>        '@hr.com'<br/>    )<br/>    AS "EMAIL"<br/>FROM employees<br/>WHERE JOB_ID = 'IT_PROG';</code></p></blockquote><table align="center" border="1" summary="Results from query 3"><tbody><tr><th style="background-color:#9e9e9e; text-align:center"><p>EMAIL</p></th></tr></tbody></table><tr><td><p>ahunold@hr.com</p></td></tr><tr><td><p>bernst@hr.com</p></td></tr><tr><td><p>daustin@hr.com</p></td></tr><tr><td><p><strong>vpatabal</strong>@hr.com</p></td></tr><tr><td><p>dlorentz@hr.com</p></td></tr><h3>VERY IMPORTANT</h3><blockquote><p>The resolution of this example demonstrates how to reach the solution of some statements requires a successive refinement of the proposed solution. That is to say, to raise sentences whose result is gradually approaching the required solution.</p></blockquote><h3>Exercise:</h3><p>It shows, in a single column, the name and surname of the programmers, in the format shown in the tests.</p><p>Order the result alphabetically by the last name.</p>