<h1>Subqueries in the <code>WHERE</code> clause that return sets of values.</h1><p>Another operator we can use with subqueries that return sets of values ​​is <code>IN</code>. We already used this operator as a set operator. We remember now:</p><p><em>... what would happen if the list of possible values ​​were increased, for example to all of Europe. That list should include at least: 'IT', 'UK', 'DE', 'CH', 'NL'...</em>:</p><blockquote><p><code>SELECT STREET_ADDRESS , CITY, COUNTRY_ID<br />FROM locations<br />WHERE COUNTRY_ID <strong>IN ('IT', 'UK', 'DE', 'CH', 'NL')</strong>;</code> </p></blockquote><p>Since we did not know about subqueries at that time, we had to go to the countries table to manually find the codes of the countries that belong to <code>'Europe'</code>. But, we can send this previous search as a subquery:</p><blockquote><p><code>SELECT STREET_ADDRESS, CITY, COUNTRY_ID<br />FROM locations<br />WHERE COUNTRY_ID IN (<br /> SELECT COUNTRY_ID <br /> FROM countries JOIN regions USING(REGION_ID)<br /> WHERE REGION_NAME = 'Europe'<br />);</code></p></blockquote><table align="center" border=" 1" summary="Results from query"><tbody><tr><th style="text-align: center; background-color: rgb(158, 158, 158);">STREET_ADDRESS</th><th style ="text-align: center; background-color: rgb(158, 158, 158);">CITY</th><th style="text-align: center; background-color: rgb(158, 158, 158 );">COUNTRY_ID</th></tr><tr><td>20 Rue des Corps-Saints</td><td>Geneva</td><td>CH</td></tr>< tr><td>Murtenstrasse 921</td><td>Bern</td><td>CH</td></tr><tr><td>Schwanthalerstr. 7031</td><td>Munich</td><td>DE</td></tr><tr><td>1297 Via Cola di Rie</td><td>Rome</td><td >IT</td></tr><tr><td>...</td><td>...</td><td>...</td></tr></tbody ></table><p> </p><h3>Exercise:</h3><p>Using a subquery, display the employees whose job contains the word <code>'Representative'</code>.</p ><p>Sort results alphabetically by last name.</p>