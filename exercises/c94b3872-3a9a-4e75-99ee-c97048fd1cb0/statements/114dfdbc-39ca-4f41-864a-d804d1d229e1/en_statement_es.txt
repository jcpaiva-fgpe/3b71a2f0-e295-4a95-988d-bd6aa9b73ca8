<p>If we show the first 5 records of the employees table of the schema <strong>HR</strong></p><blockquote><p><code>SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MANAGER_ID<br />FROM employees <br />FETCH FIRST 5 ROWS ONLY;</code></p></blockquote><table align="center" border="1" summary="Results from query"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">EMPLOYEE_ID</th><th style="background-color:#9e9e9e; text-align:center">FIRST_NAME</th><th style= "background-color:#9e9e9e; text-align:center">LAST_NAME</th><th style="background-color:#9e9e9e; text-align:center">MANAGER_ID</th></tr><tr ><td>100</td><td>Steven</td><td>King</td><td>-</td></tr><tr><td>101</td><td >Neena</td><td>Kochhar</td><td>100</td></tr><tr><td>102</td><td>Lex</td><td>De Haan </td><td>100</td></tr><tr><td>103</td><td>Alexander</td><td>Hunold</td><td>102</td ></tr><tr><td>104</td><td>Bruce</td><td>Ernst</td><td>103</td></tr></tbody></ table><p>we can see that there are hierarchical relationships between these records: <code>Steven King</code> is the hierarchical superior of <code>Lex De Haan</code> and he, in turn, is the hierarchical superior of <code>Alexander Hunold</code>.</p ><p>PostgreSQL allows us to query the existing hierarchical relationships between table records.</p><h3>Queries with <code>WITH</code></h3><p>In order to address hierarchical queries with PostgreSQL, first we must know the basic operation of <code>WITH</code></p><p><code>WITH</code> allows you to write auxiliary statements to use them in large queries. These statements, which are often named <code>Common Table Expressions</code> or <acronym class="acronym">CTE</acronym>s, can be interpreted as temporarily defined tables that exist for a single query. Each auxiliary statement in a <code>WITH</code> clause can be a <code>SELECT</code>, <>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</ code>; and the <code>WITH</code> clause itself is associated with the main query which can also be a <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code> , or <code>DELETE</code>.</p><h3>Example <code>WITH</code></h3><blockquote><p><code>WITH CEO AS (SELECT * FROM employees WHERE MANAGER_ID IS NULL)<br />SELECT FIRST_NAME, LAST_NAME FROM employees WHERE MANAGER_ID IN (SELECT EMPLOYEE_ID FROM CEO);</code></p></blockquote><blockquote><pre> first_name | last_name ------------+----------- Neena | Kochhar Lex | De Haan Den | Raphael Matthew | Weiss-Adam | Fripp Payam | Kaufling Shanta | VollmanKevin | Mourgos John | RussellKaren | Albert Partners | Errazuriz Gerald | Cambrault Eleni | Zlotkey Michael | Hartstein (14 rows) </pre></blockquote><h3>Hierarchical query example:</h3><blockquote><pre><code> WITH RECURSIVE managers AS ( SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, 1::integer LEVEL FROM employees WHERE MANAGER_ID IS NULL -- Root is the employee with manager_id field as NULL UNION ALL SELECT subordinates.employee_id, subordinates.first_name, subordinates.last_name, managers.level + 1 FROM employees subordinates JOIN managers ON managers.EMPLOYEE_ID = subordinates. MANAGER_ID -- How to go down throw the hierarchy ) SELECT CONCAT(LPAD(' ', 10 * (LEVEL - 1), '-'),EMPLOYEE_ID) AS "HIERARCHICAL_LEVEL", FIRST_NAME, LAST_NAME FROM managers;-- Show them < /code></pre></blockquote><blockquote><pre> HIERARCHICAL_LEVEL | first_name | last_name ------------------------------------+------------- +------------- 100 | Steve | King --------- 101 | babe | Kochhar --------- 102 | lex | De Haan --------- 114 | give | Raphaely --------- 120 | Matthew | Weiss --------- 121 | Adam | Fripp --------- 122 | Payam | Kaufling --------- 123 | Shanta | Vollmann --------- 124 | Kevin | Mourgos --------- 145 | John | Russell --------- 146 | Karen | Partners --------- 147 | Albert | Errazuriz --------- 148 | Gerald | Cambrault --------- 149 | Elena | Zlotkey --------- 201 | Michael | Hartstein ------------------- 103 | Alexander | Hunold ------------------- 108 | Nancy | Greenberg ------------------- 115 | Alexander | Khoo </pre></blockquote><h3>Exercise:</h3><p>Shows the existing hierarchical relationships that start with employees of the department named '<code>IT</code>'.</p>