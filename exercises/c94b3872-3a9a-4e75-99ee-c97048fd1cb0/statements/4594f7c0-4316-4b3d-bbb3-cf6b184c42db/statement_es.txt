<p>Si mostramos los 5 primeros registros de la tabla employees del esquema <strong>HR</strong></p><blockquote><p><code>SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, MANAGER_ID<br />FROM employees<br />FETCH FIRST 5 ROWS ONLY;</code></p></blockquote><table align="center" border="1" summary="Results from query"><tbody><tr><th style="background-color:#9e9e9e; text-align:center">EMPLOYEE_ID</th><th style="background-color:#9e9e9e; text-align:center">FIRST_NAME</th><th style="background-color:#9e9e9e; text-align:center">LAST_NAME</th><th style="background-color:#9e9e9e; text-align:center">MANAGER_ID</th></tr><tr><td>100</td><td>Steven</td><td>King</td><td>-</td></tr><tr><td>101</td><td>Neena</td><td>Kochhar</td><td>100</td></tr><tr><td>102</td><td>Lex</td><td>De Haan</td><td>100</td></tr><tr><td>103</td><td>Alexander</td><td>Hunold</td><td>102</td></tr><tr><td>104</td><td>Bruce</td><td>Ernst</td><td>103</td></tr></tbody></table><p>podemos observar que existe relaciones de jerarqu&iacute;a entre esos registros: <code>Steven King</code> es el superior jer&aacute;rquico de <code>Lex De Haan</code> y &eacute;ste, a su vez, es superior jer&aacute;rquico de <code>Alexander Hunold</code>.</p><p>PostgreSQL nos permite consultar las relaciones jer&aacute;rquicas existentes entre los registros de las tablas.</p><h3>Consultas con <code>WITH</code></h3><p>Para poder abordar las consultas jerárquicas con PostgreSQL, primero debemos conocer el funcionamiento b&aacute;sico de <code>WITH</code></p><p><code>WITH</code> permite escribir sentencias auxiliares para usarlas en consultas de gran tamaño. Estas sentencias, que a menudo son nombradas como <code>Common Table Expressions</code> o <acronym class="acronym">CTE</acronym>s, pueden ser interpretadas como tablas definidas temporalmente que existen para una única consulta. Cada sentencia auxiliar en una cl&aacute;usula <code>WITH</code> puede ser un <code>SELECT</code>, <>INSERT</code>, <code>UPDATE</code>, o <code>DELETE</code>; y la propia cl&aacute;usula <code>WITH</code> clause est&aacute; asociada a la consulta principal que tambi&eacute;n puede ser un <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, o <code>DELETE</code>.</p><h3>Ejemplo <code>WITH</code></h3><blockquote><p><code>WITH CEO AS (SELECT * FROM employees WHERE MANAGER_ID IS NULL)<br />SELECT FIRST_NAME, LAST_NAME FROM employees WHERE MANAGER_ID IN (SELECT EMPLOYEE_ID FROM CEO);</code></p></blockquote><blockquote><pre> first_name | last_name  ------------+-----------  Neena      | Kochhar  Lex        | De Haan  Den        | Raphaely  Matthew    | Weiss  Adam       | Fripp  Payam      | Kaufling  Shanta     | Vollman  Kevin      | Mourgos  John       | Russell  Karen      | Partners  Alberto    | Errazuriz  Gerald     | Cambrault  Eleni      | Zlotkey  Michael    | Hartstein (14 rows) </pre></blockquote><h3>Ejemplo de consulta jerárquica:</h3><blockquote><pre><code> WITH RECURSIVE managers AS (         SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, 1::integer LEVEL FROM employees WHERE MANAGER_ID IS NULL -- Root is the employee with manager_id field as NULL       UNION ALL         SELECT subordinates.employee_id, subordinates.first_name, subordinates.last_name, managers.level + 1         FROM employees subordinates JOIN managers ON managers.EMPLOYEE_ID = subordinates.MANAGER_ID -- How to go down throw the hierarchy     )     SELECT CONCAT(LPAD(' ', 10 * (LEVEL - 1), '-'),EMPLOYEE_ID) AS "HIERARCHICAL_LEVEL", FIRST_NAME, LAST_NAME FROM managers;-- Show them </code></pre></blockquote><blockquote><pre>         HIERARCHICAL_LEVEL         | first_name  |  last_name   -----------------------------------+-------------+-------------  100                               | Steven      | King  --------- 101                     | Neena       | Kochhar  --------- 102                     | Lex         | De Haan  --------- 114                     | Den         | Raphaely  --------- 120                     | Matthew     | Weiss  --------- 121                     | Adam        | Fripp  --------- 122                     | Payam       | Kaufling  --------- 123                     | Shanta      | Vollman  --------- 124                     | Kevin       | Mourgos  --------- 145                     | John        | Russell  --------- 146                     | Karen       | Partners  --------- 147                     | Alberto     | Errazuriz  --------- 148                     | Gerald      | Cambrault  --------- 149                     | Eleni       | Zlotkey  --------- 201                     | Michael     | Hartstein  ------------------- 103           | Alexander   | Hunold  ------------------- 108           | Nancy       | Greenberg  ------------------- 115           | Alexander   | Khoo  </pre></blockquote><h3>Ejercicio:</h3><p>Muestra las relaciones jer&aacute;rquicas existentes que comienzan con empleados del departamento de nombre &#39;<code>IT</code>&#39;.</p>